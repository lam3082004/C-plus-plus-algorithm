#include<bits/stdc++.h>
#define   nmax        100000 + 5
#define   ll          long long
#define   fo(i,a,b)   for(ll i = a; i <= b;i++)
#define   li          pair<long long,int>
#define   ii          pair<int,int>
#define   fi          first
#define   se          second
#define   BIT(mask,k) (((mask)>>(k)) & 1)
#define   off(mask,k) ((mask)^(1<<(k)))
#define   ms(x,a)     memset(x, (a), sizeof x)
#define   all(a)      a.begin(),a.end()
const ll  oo = 1e18;
const ll mod = 1e9+7;
using namespace std;
//-----------------------------------------
void Setup()
{
    #ifndef ONLINE_JUDGE
    freopen("HoangCoder.inp", "r", stdin);
    freopen("HoangCoder.out", "w", stdout);
    #endif // ONLINE_JUDGE
    ios::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
}
//-----------------------------------------
int n, m, q, s, t;
vector<ii> a[nmax];
ll d[nmax];
int mark[nmax];
int trace[nmax];
priority_queue<li, vector<li>, greater<li>> pq;
//-----------------------------------------
int main()
{
    Setup();
    cin >> n >> m;
    for (int i = 1; i <= m; i++)
    {
        int u, v, w, dir;
        cin >> u >> v >> w;
        a[u].push_back({v, w});
        a[v].push_back({u, w});
    }
    for (int i = 1; i <= n; i++)
    {
        ll ans = -oo;
        for (int j = 1; j <= n; j++)
        {
            if (i != j)
            {
                t = i;
                s = j;
                for (int i = 1; i <= n; i++)
                    d[i] = oo;
                d[s] = 0;
                for (int i = 1; i <= n; i++)
                    mark[i] = 0;
                pq.push({d[s], s});

                while(pq.size() > 0)
                {
                    li node = pq.top();
                    pq.pop();
                    int u = node.se;
                    if (mark[u] == 1) continue;

                    mark[u] = 1;
                    for (int i = 0; i < a[u].size(); i++)
                    {
                        int v = a[u][i].fi;
                        int w = a[u][i].se;
                        if (d[u] + w < d[v])
                        {
                            d[v] = d[u] + w;
                            trace[v] = u;
                            pq.push({d[v], v});
                        }
                    }
                }
                ans = max (ans, d[t]);
                //cout << s <<" "<< t <<" "<< d[t] <<"\n";
            }
        }
        cout << ans <<"\n";
    }

}
//-----------------------------------------