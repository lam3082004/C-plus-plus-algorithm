#include <bits/stdc++.h>
#define ll unsigned long long
#define fo(i,a,b) for(int i=a;i<=b;++i)
#define fod(i,a,b) for(int i=a;i>=b;--i)
#define ii pair<int,int>
#define iii pair<ll,ii>
#define fi first
#define se second
#define oo 1e18
#define bit(x,i) (((x)>>(i))&1)
using namespace std;
const int MOD = 1e9 + 7;
const int N = 1e5 + 5;
struct tree
{
int fi,se,th;
};
ll n,k,a[N];
tree st[N<<2];
vector<int>ans;
tree combine(tree a,tree b)
{
if(a.fi >= b.fi)
return {a.fi,a.se + b.se,a.th};
if(a.fi < b.fi)
return {b.fi,a.se + b.se,b.th};
return {a.fi,a.se + b.se,min(a.th,b.th)};
}
void build(int id,int l,int r)
{
if(l > r)
return ;
if(l == r)
{
st[id] = {a[l],1,l};
return ;
}
int mid = l + r >> 1;
build(id<<1,l,mid);
build(id<<1|1,mid+1,r);
st[id] = combine(st[id<<1],st[id<<1|1]);
}
void up(int id,int l,int r,int p)
{
if(r < p || p < l)
return ;
if(l == r)
{
st[id] = {0,0,l};
return ;
}
int mid = l + r >> 1;
up(id<<1,l,mid,p);
up(id<<1|1,mid+1,r,p);
st[id] = combine(st[id<<1],st[id<<1|1]);
}
tree get(int id,int l,int r,int u,int v)
{
if(v < l || r < u)
return {0,0,0};
if(u <= l && r <= v)
return st[id];
int mid = l + r >> 1;
return combine(get(id<<1,l,mid,u,v),get(id<<1|1,mid+1,r,u,v));
}
int main()
{
ios::sync_with_stdio(0);
cin.tie(0);cout.tie(0);
cin>>n>>k;
fo(i,1,n)
cin>>a[i];
build(1,1,n);
fo(i,1,n)
{
if(k == 0)
break;
int l = 1,r = n;
tree res1 = {0,0,0},res2 = {0,0,0};
while(l <= r)
{
int mid = l + r >> 1;
tree tmp = get(1,1,n,1,mid);
if(tmp.se <= k+1)
{
res1 = tmp;
l = mid + 1;
}
else
r = mid - 1;
}
l = 1,r = n;
while(l <= r)
{
int mid = l + r >> 1;
tree tmp = get(1,1,n,1,mid);
if(tmp.fi >= res1.fi)
{
res2 = tmp;
r = mid - 1;
}
else
l = mid + 1;
}
k -= (res2.se - 1);
ans.push_back(a[res2.th]);
up(1,1,n,res2.th);
}
fo(i,1,n)
if(get(1,1,n,i,i).se > 0)
ans.push_back(a[i]);
for(auto u : ans)
cout<<u<<' ';
}